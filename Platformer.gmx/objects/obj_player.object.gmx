<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the player object

grav = 1;
spd = 4;
jspd = 12;
hspd = 0;
vspd = 0;
airjump = 1;
fric = 0.5;

draw_xscale = 1;
draw_yscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

//-- FIXME: move these variables to a script
var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(vk_up);

//check for the ground
if (place_meeting(x, y+1, obj_solid)){
    vspd = 0;
    airjump = 1;
    
    //jumping if we are on the ground
    if (jkey){
        vspd = -jspd;
        draw_yscale = 1.5;
        draw_xscale = 0.75;
    }
} else {
    //move down with gravity
    if(vspd &lt; 10){
        vspd += grav;
    }
    
    if(keyboard_check_released(vk_up) and vspd &lt; -4){
        vspd = -4;
    }
    
    //check for airjump
    if(airjump &gt; 0){
        if(jkey){
            sprite_index = 0;
            vspd = -jspd;
            airjump -= 1;
        }
    }
}

//moving to the right
if (rkey) {
    if (hspd &lt; spd){
        hspd += fric;
    } else {
        hspd = spd;
    }
    
    //Left wall jump
    if (place_meeting(x-1, y, obj_solid) and !place_meeting(x, y+1, obj_solid) and !lkey){
        vspd = -jspd
    }
}

//moving to the left
if (lkey) {
    if (hspd &gt; -spd){
        hspd -= fric;
    } else {
        hspd = -spd;
    }
    
    //Right wall jump
    if (place_meeting(x+1, y, obj_solid) and !place_meeting(x, y+1, obj_solid) and !rkey){
        vspd = -jspd
    }
}

//check for not moving
if ((!rkey and !lkey) or (rkey and lkey)){
    if (hspd != 0){
        if (hspd &lt; 0){
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
}

//horizontal collisions
if (place_meeting(x + hspd, y, obj_solid)) {
    while (!place_meeting(x+sign(hspd), y, obj_solid)) {
        x += sign (hspd);
    }
    hspd = 0;
}

//move the player object horizontally
x += hspd;

//vertical collisions
if (place_meeting(x, y + vspd, obj_solid)) {
    while (!place_meeting(x, y + sign(vspd), obj_solid)) {
        y += sign (vspd);
    }
    vspd = 0;
}

//move the player object vertically
y += vspd;

//control the sprites
if (yprevious != y){
    sprite_index = spr_player_jump;
    image_speed = 0;
    image_index = y&lt;yprevious;
} else {
    if (xprevious != x){
        sprite_index = spr_player_run;
        image_speed = .25;
    } else {
        sprite_index = spr_player_stand;
        image_speed = .1;
    }
}

//control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x) {
    image_xscale = -1;
}

scr_camera_movement();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
